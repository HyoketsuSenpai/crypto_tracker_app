// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_tracker_app/test/features/Bookmarks/presentation/bloc/bookmarks_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:crypto_tracker_app/core/error/failure.dart' as _i6;
import 'package:crypto_tracker_app/core/usecase/usecase.dart' as _i9;
import 'package:crypto_tracker_app/features/Bookmarks/domain/entities/coin.dart'
    as _i8;
import 'package:crypto_tracker_app/features/Bookmarks/domain/repositories/bookmark_repository.dart'
    as _i2;
import 'package:crypto_tracker_app/features/Bookmarks/domain/usecases/add_bookmark.dart'
    as _i4;
import 'package:crypto_tracker_app/features/Bookmarks/domain/usecases/get_all_bookmarked.dart'
    as _i7;
import 'package:crypto_tracker_app/features/Bookmarks/domain/usecases/is_bookmarked.dart'
    as _i10;
import 'package:crypto_tracker_app/features/Bookmarks/domain/usecases/remove_bookmark.dart'
    as _i11;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookmarkRepository_0 extends _i1.SmartFake
    implements _i2.BookmarkRepository {
  _FakeBookmarkRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddBookmark].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddBookmark extends _i1.Mock implements _i4.AddBookmark {
  @override
  _i2.BookmarkRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookmarkRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(_i4.Params? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                  _FakeEither_1<_i6.Failure, _i3.Unit>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [GetAllBookmarked].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllBookmarked extends _i1.Mock implements _i7.GetAllBookmarked {
  @override
  _i2.BookmarkRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookmarkRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i8.Coin>>> call(
    _i9.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i8.Coin>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i8.Coin>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i3.Either<_i6.Failure, List<_i8.Coin>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i8.Coin>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i8.Coin>>>);
}

/// A class which mocks [IsBookmarked].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsBookmarked extends _i1.Mock implements _i10.IsBookmarked {
  @override
  _i2.BookmarkRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookmarkRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i10.Params? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither_1<_i6.Failure, bool>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [RemoveBookmark].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveBookmark extends _i1.Mock implements _i11.RemoveBookmark {
  @override
  _i2.BookmarkRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeBookmarkRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookmarkRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(_i11.Params? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                  _FakeEither_1<_i6.Failure, _i3.Unit>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}
